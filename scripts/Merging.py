# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fy8rusTee9YKRKLfS1xjAzClmHgtPvUh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split,cross_val_score,KFold
from sklearn.linear_model import LinearRegression, Lasso, Ridge, LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import mean_squared_error,mean_absolute_error,accuracy_score, adjusted_rand_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PolynomialFeatures

import warnings
warnings.filterwarnings("ignore")

# reading in datafiles
attendance = pd.read_excel('attendance_data.xlsx')
calendar = pd.read_csv('calendar_data.csv')
weather = pd.read_csv('weather_data.csv')
other_events = pd.read_excel('Other Events-2.xlsx')

def merging_datasets(calendar, weather, other_events):

  # converting Date column to pandas datetime format
  attendance['Date'] = pd.to_datetime(attendance['Date'], infer_datetime_format=True)

  # converting Date column to pandas datetime format
  weather['Date'] = pd.to_datetime(weather['date'], infer_datetime_format=True)

  # converting Date column to pandas datetime format
  calendar['Date'] = pd.to_datetime(calendar['Date (mm-dd-yyyy)'], infer_datetime_format=True)

  # merging attendance data with academic calendar data
  one = attendance.merge(calendar, how='left', on='Date')
  # merging in weather data
  two = one.merge(weather, how='left', on='Date')

  # merging in data from other events
  three = pd.merge(two, other_events, on=['Season','Opponent'], how='left')
  # dropping repeated/unnecessary columns
  three.drop(columns=['date', 'Date (mm-dd-yyyy)', 'Attendance_y'], inplace=True)
  # renaming attendance variable
  three.rename(columns = {'Attendance_x':'Attendance'}, inplace = True)
  # calculating the win proportion at that point in the season
  three['Duke Overall W/L'] = three['Duke W']/(three['Duke W']+three['Duke L '])

  return three

three = merging_datasets(calendar, weather, other_events)

three.to_csv('Merged V1.csv')